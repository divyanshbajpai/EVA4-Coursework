# -*- coding: utf-8 -*-
"""model_function.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YQm738RhlbQnU9RNKkEemvjFje15iYf9
"""

import torch
import torchvision
import torch.nn as nn
import torch.nn.functional as F
from torchsummary import summary
import torch.optim as optim
from torchvision import datasets, transforms
from torch.optim.lr_scheduler import StepLR
import numpy as np
from tqdm import tqdm

def model_summary(model, device, input_size):
    model = model.to(device)
    summary(model, input_size=input_size)
    return

def train(model, device, train_loader, optimizer, criterion):
    model.train()
    pbar = tqdm(train_loader)
    train_loss = 0
    correct = 0
    processed = 0
    for batch_idx, (data, target) in enumerate(pbar):
      data, target = data.to(device), target.to(device)
      optimizer.zero_grad()
      y_pred = model(data)
      loss = criterion(y_pred, target)
      train_loss += loss.item()

      loss.backward()
      optimizer.step()
      
      pred = y_pred.argmax(dim=1, keepdim=True)
      correct += pred.eq(target.view_as(pred)).sum().item()
      processed += len(data)
      pbar.set_description(desc= f'Loss={train_loss/(batch_idx+1):0.6f} Batch_id={batch_idx} Accuracy={100*correct/processed:0.2f}')

    train_loss /= len(train_loader)
    acc = 100. * correct/len(train_loader.dataset) 
    return np.round(acc,2), np.round(train_loss,6)

def test(model, device, test_loader, criterion):
    model.eval()
    test_loss = 0
    correct = 0
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            output = model(data)
            test_loss += criterion(output, target).item()
            pred = output.argmax(dim=1, keepdim=True)
            correct += pred.eq(target.view_as(pred)).sum().item()

        test_loss /= len(test_loader) # criterion = nn.CrossEntropyLoss()

    print('\nTest set: Average loss: {:.6f}, Accuracy: {}/{} ({:.2f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))
    
    acc = 100. * correct / len(test_loader.dataset)
    return np.round(acc,2), test_loss

def definemodel(model, device, trainloader, testloader, epochs, lr,decay=0):
  criterion = nn.CrossEntropyLoss()
  optimizer = optim.SGD(model.parameters(), lr=lr, momentum=0.9, weight_decay=decay)
  scheduler = StepLR(optimizer, step_size=8, gamma=0.1)

  train_losses = []
  test_losses = []
  train_acc = []
  test_acc = []

  for epoch in range(epochs):
    print("EPOCH:", epoch)
    acc, loss = train(model, device, trainloader, optimizer, criterion)
    train_acc.append(acc)
    train_losses.append(loss)

    scheduler.step()

    acc, loss = test(model, device, testloader, criterion)
    test_acc.append(acc)
    test_losses.append(loss)
  
  return train_acc, train_losses, test_acc, test_losses

def get_test_accuracy_cifar10(model, device, testloader):
    correct = 0
    total = 0
    with torch.no_grad():
        for data in testloader:
            images, labels = data
            images, labels = images.to(device), labels.to(device)
            outputs = model(images)
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()
    
    acc = 100. * correct / total
    print('Accuracy of the network on the %d test images: %0.2f %%' % (total, acc))
    return

def class_accuracy(model, device, classes, testloader):
    class_correct = list(0. for i in range(10))
    class_total = list(0. for i in range(10))
    with torch.no_grad():
        for data in testloader:
            images, labels = data
            images, labels = images.to(device), labels.to(device)
            outputs = model(images)
            _, predicted = torch.max(outputs, 1)
            c = (predicted == labels).squeeze()
            for i in range(4):
                label = labels[i]
                class_correct[label] += c[i].item()
                class_total[label] += 1


    for i in range(10):
        print('Accuracy of %5s : %2d %%' % (
            classes[i], 100 * class_correct[i] / class_total[i]))
    return