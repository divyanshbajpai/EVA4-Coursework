# -*- coding: utf-8 -*-
"""Network_blocks.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15I2EmkKt1cFLyd_dgNiEEXWJ_wUmFILI
"""

import torch
import torchvision
import torch.nn as nn
import torch.nn.functional as F
class Conv2dBnDr(nn.Module):
    def __init__(self, inc, opc, ks, padding=0, dilation=1, drop_val=0):
        super(Conv2dBnDr,self).__init__()

        self.drop_val = drop_val

        self.conv = nn.Sequential(           
            nn.Conv2d(in_channels=inc, out_channels=opc, kernel_size=ks, padding=padding, dilation=dilation, bias=False), 
            nn.BatchNorm2d(opc),
            nn.ReLU(),
            nn.Dropout(self.drop_val)
        )

    def forward(self, x):
        x = self.conv(x)
        return x

class Conv2d_Sep(nn.Module):
    def __init__(self, inc, opc, ks, padding=0, dilation=1,drop_val=0):
        super(Conv2d_Sep,self).__init__()

        self.drop_val = drop_val
        self.conv = nn.Sequential(
            nn.Conv2d(in_channels=inc, out_channels=inc, groups=inc, kernel_size=ks, padding=padding,  dilation=dilation, bias=False), 
            nn.Conv2d(in_channels=inc, out_channels=opc, kernel_size=(1,1), bias=False),
            nn.BatchNorm2d(opc),
            nn.ReLU(),
            nn.Dropout(self.drop_val)
        )

    def forward(self, x):
        return self.conv(x)


class MaxPoint(nn.Module):
    def __init__(self, inc, opc):
        super(MaxPoint,self).__init__()

        self.conv = nn.Sequential(           
            nn.MaxPool2d(2, 2),                                                           
            nn.Conv2d(in_channels=inc, out_channels=opc, kernel_size=(1, 1), bias=False),
            nn.BatchNorm2d(opc)
        )

    def forward(self, x):
        return self.conv(x)